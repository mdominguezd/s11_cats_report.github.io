## Baseline scenario

### Main findings

The main finding of the interviews were the steps followed currently to discover, retrieve and visualize data. These steps are summarized on @fig-baseline and show how complex and time consuming the process of discovering and visualizing spatial data can be for a Satelligence employee nowadays. Moreover, the steps followed were categorized in four classes depending on how much time is generally spent carrying out.

![Baseline workflow](img/Baseline_data_discovery_workflow.png){#fig-baseline width="100%"}

The major pitfalls found on the process of data discovery in the company could be summarized in ....

## Service integration

*Explain here how eoAPI uses multiple services, how each of them helps S11 in their data discovery and vizz tasks, and how did I manage to deploy it*

Kubernetes

STAC-API, pgSTAC, TiTiler

## Multi-format data visualization

TiTiler-PgSTAC & TiTiler-xarray

## Performance assessment

### Data discovery

### Data visualization
IDEA: GET requests and time them

```{python}
#| echo: false
#| fig-cap: "Request times depending on data format and zoom level"

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib.colors import LinearSegmentedColormap

s11_cmap = LinearSegmentedColormap.from_list('s11', ['#96d7fa', '#ff0000'])
background_color = '#180066'
text_color = 'white'

data = pd.read_csv('https://raw.githubusercontent.com/mdominguezd/s11_cats_report.github.io/main/sections/request_time_results_1iter.csv')

sns.set(rc={'axes.facecolor':background_color, 
'figure.facecolor':background_color, 
'text.color' : text_color,
'axes.labelcolor' : text_color,
'xtick.color': text_color,
'ytick.color': text_color,})

fig, ax = plt.subplots(1,2,figsize= (15,5))

sns.boxplot(data[['COG', 'ZARR']], palette = {'COG':s11_cmap(0), 'ZARR':s11_cmap(255)}, ax = ax[0], linecolor=text_color)
sns.despine(trim = True, offset = -10, ax = ax[0])

ax[0].set_ylabel('Request time [s]')
ax[0].set_xlabel('Data format')

sns.regplot(data, x = 'zoom level', y = 'COG', ax = ax[1], color=s11_cmap(0))
sns.regplot(data, x = 'zoom level', y = 'ZARR', ax = ax[1], color=s11_cmap(255))
ax[1].set_ylabel('Request time [s]')
sns.despine(trim = True, offset = -10, ax = ax[1])


print("Speed up (COG)", data['ZARR'].mean()/data['COG'].mean())
```



